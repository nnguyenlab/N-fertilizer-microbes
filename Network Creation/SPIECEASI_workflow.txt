install_github("hallucigenia-sparsa/seqtime") 
library(seqtime)


library(remotes)
install_github("zdk123/SpiecEasi")
library(SpiecEasi)

source('http://bioconductor.org/biocLite.R')
biocLite('phyloseq')
library(phyloseq)

#This is set up so that you save the file after each run, and then sweep the objects clean for each new run. Start by choosing the json biom file of interest
#FIRST CHOOSE THE JSON BIOM FILE
biom.path <- file.choose()

#NOW WE CONVERT THAT TO A PHYLOSEQ OBJECT AND SEPARATE IMPORTANT PARTS
phyloseqobj=import_biom(biom.path)
otus=otu_table(phyloseqobj)
taxa=tax_table(phyloseqobj)

#FILTERING STEP> MINIMUM OCCURENCE AND DUMMY COLUMN
filterobj=filterTaxonMatrix(otus,minocc=6,keepSum = TRUE, return.filtered.indices = TRUE)
otus.f=filterobj$mat
taxa.f=taxa[setdiff(1:nrow(taxa),filterobj$filtered.indices),]
dummyTaxonomy=c("k__dummy","p__","c__","o__","f__","g__","s__")
taxa.f=rbind(taxa.f,dummyTaxonomy)
rownames(taxa.f)[nrow(taxa.f)]="0"
rownames(otus.f)[nrow(otus.f)]="0"

updatedotus=otu_table(otus.f, taxa_are_rows = TRUE)
updatedtaxa=tax_table(taxa.f)
phyloseqobj.f=phyloseq(updatedotus, updatedtaxa)

#NETWORK CREATION
#increasing lamnba.min makes a denser network
#mb has higher precision but takes longer, but also makes less dense networks
#For our paper we will just use the mb method. Others examples are included after but will not be used
spiec.out.mb=spiec.easi(phyloseqobj.f, pulsar.params = list(thresh = 0.05), lambda.min.ratio=1e-2, method = "mb", sel.criterion = "stars",
                        verbose = TRUE, pulsar.select = TRUE)
#skip
spiec.out.glasso=spiec.easi(phyloseqobj.f, method="glasso",icov.select.params=list(rep.num=50))
spiec.out.sparcc=sparcc(phyloseqobj.f)
#end_skip

#======CREATING THE PRELIMINARY GRAPH. THIS IS NOT A PLOT, WE WILL VIEW IT LATER IN CYTOSCAPE
#next we need to make the igraph. again just the mb
spiec.graph.mb=adj2igraph(getRefit(spiec.out.mb), vertex.attr=list(name=taxa_names(phyloseqobj.f)))

#skip
spiec.graph.glasso=adj2igraph(getRefit(spiec.out.glasso), vertex.attr=list(name=taxa_names(phyloseqobj.f)))
spiec.graph.sparcc=adj2igraph(getRefit(spiec.out.sparcc), vertex.attr=list(name=taxa_names(phyloseqobj.f)))
#end_skip 

#=======FILTERING POSITIVE EDGES ONLY
#needed to view to find where the network data was. do not need to view after
View(spiec.out.mb)

#This step filters all of the positive OTUs based on their positive value in the inverse covariance matrix
betaMat=as.matrix(symBeta(getOptBeta(spiec.out.mb)))

otu.ids=colnames(spiec.out.mb$est$data)
edges=E(spiec.graph.mb)
filtered.edges=c()
for(e.index in 1:length(edges)){
  adj.nodes=ends(spiec.graph.mb,edges[e.index])
  xindex=which(otu.ids==adj.nodes[1])
  yindex=which(otu.ids==adj.nodes[2])
  beta=betaMat[xindex,yindex]
  if(beta<0){
    filtered.edges=c(filtered.edges,edges[e.index])
  }
}
spiec.graph.pos=delete_edges(spiec.graph.mb, filtered.edges)



#PLOTTING FOR VERIFICATION
plot_network(spiec.graph.pos, phyloseqobj.f, type='taxa', color="Rank6", label=NULL)
#Skip
plot_network(spiec.graph, phyloseqobj.f, type='taxa', color="Rank6", label=NULL)
plot_network(spiec.graph, phyloseqobj.f, type='taxa', color="Rank6", label=NULL)
plot_network(spiec.graph, phyloseqobj.f, type='taxa', color="Rank6", label=NULL)
#end_skip

#WRITING OUT THE EDGE TABLE
output.path="/Users/nguyenlab/Desktop/Steven/Directory/"
write.graph(spiec.graph.pos,file=file.path(output.path,"spieceasi.fun_compost"),format="ncol") 

#IMPORTANT READ
#When importing in to cytoscape you will need to clear out any interaction with the dummy column--this will be obvious as the ID name will be a "0"
#Every space then needs to be replaced with a commma before upload
#when importing the table into Cytoscape, the first column is the source node, the second the target, and the third is the edge property
#when importing the metadata, match up the shared names and include whichever metadata columns you need